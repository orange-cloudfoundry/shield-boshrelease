#!/bin/bash
<% require 'json' -%>
export PATH=${PATH}:/var/vcap/packages/shield/bin
export PATH=${PATH}:/var/vcap/packages/utils/bin
SHIELD_CONFIG=$(mktemp --tmpdir auto.XXXXXX)
trap "rm -rf ${SHIELD_CONFIG}" INT TERM QUIT EXIT
<%
def format_name(name, err_ctx)
   var = name.gsub("<deployment_name>", spec.deployment)
   var = var.gsub("<instance_index>", spec.index.to_s)
   var = var.gsub("<ip>", spec.ip)
   var = var.gsub("<instance_name>", spec.name)
   var = var.gsub("<instance_zone>", spec.az)
   if var.match(/<(\S+)>/)
       raise "Unknown pattern #{var.match(/<(\S+)>/)} for #{err_ctx} #{name}"
   end
   return var
end
%>

<%
  if_p("autoprovision") do |endpoint|
    if endpoint.to_s == "true"
      api_key = link('shield-daemon').p('auth.api_keys').values.first
      domain = p("domain", link('shield-daemon').instances.first.address)
      endpoint = "https://#{domain}"
    else
      api_key = p('provisioning_key')
    end
-%>
# The SHIELD_API_TOKEN is set here so that the post-start script will fail
# to render when provisioning_key is not specified, but the script is about
# to try to create targets or jobs
export SHIELD_API_TOKEN=<%= api_key %>
<% if p("skip_ssl_verify") -%>
export SHIELD_SKIP_SSL_VERIFY=true
<% end -%>

# Create a specific  config file for shield-agent stuff, to avoid race
# conditions in case we are colocated with shield-daemon.
shield -c ${SHIELD_CONFIG} create-backend default <%= endpoint %>

<%
   my_ip = nil
   if_p('ip') do |ip|
     my_ip = ip
   end
   my_ip = spec.address if my_ip.nil?
-%>
provision() {
	local name=$1; shift
	uuid=$(shield -c ${SHIELD_CONFIG} --raw $* $name | jq -r '.uuid // empty')
	if [[ -z ${uuid} ]]; then
		echo "Creating a new $* named '$name'"
		tee >(shield -c ${SHIELD_CONFIG} --raw create-$*)
	else
		echo "Editing existing $* named '$name'"
		tee >(shield -c ${SHIELD_CONFIG} --raw edit-$* ${uuid})
	fi
}
job() {
  local name=$1
  local targ=$(shield -c ${SHIELD_CONFIG} --raw target   $2 | jq -r '.uuid // empty')
  local stor=$(shield -c ${SHIELD_CONFIG} --raw store    $3 | jq -r '.uuid // empty')
  local retn=$(shield -c ${SHIELD_CONFIG} --raw policy   $4 | jq -r '.uuid // empty')
  local sche=$(shield -c ${SHIELD_CONFIG} --raw schedule $5 | jq -r '.uuid // empty')

  cat <<EOF | provision $name job
{"name":      "${name}",
 "target":    "${targ}",
 "store":     "${stor}",
 "retention": "${retn}",
 "schedule":  "${sche}",
 "paused":    false}
EOF
}
<% p('schedules', {}).each do |name, schedule| -%>
cat <<EOF | provision '<%= format_name(name,  "schedule name") %>' schedule
{"name":"<%= format_name(name , 'schedule name') %>",
 "when":"<%= schedule %>"}
EOF
<% end -%>

<% p('retention-policies', {}).each do |name, retention| -%>
cat <<EOF | provision '<%= format_name(name, "policy name") %>' policy
{"name":"<%= format_name(name, 'policy name') %>",
 "expires":<%= retention.to_i * 86400 %>}
EOF
<% end -%>

<% p('targets', {}).each do |name, target| -%>
cat <<EOF | provision '<%= format_name(target["name"] || name , "target name") %>' target
{"name":     "<%= format_name(target["name"] || name, 'target name') %>",
 "plugin":   "<%= target["plugin"] %>",
 "endpoint": <%= target["config"].to_json.dump %>,
 "agent":    "<%= my_ip %>:<%= p("port") %>"}
EOF
<% end -%>

<% p('stores', {}).each do |name, store| -%>
cat <<EOF | provision '<%= format_name(store["name"] || name , "store name") %>' store
{"name":     "<%= format_name(store["name"] || name , 'store name') %>",
 "plugin":   "<%= store["plugin"] %>",
 "endpoint": <%= store["config"].to_json.dump %>}
EOF
<% end -%>

sleep 5

<% p('jobs', {}).each do |name, job| %>
job '<%= format_name(job["name"] || name, "job name") %>' \
    '<%= format_name(job["target"], "target name of job definition") %>'    \
    '<%= format_name(job["store"], "store name of job definition") %>'     \
    '<%= format_name(job["retention"], "retention name of job definition") %>' \
    '<%= format_name(job["schedule"], "schedule name of job definition") %>'
<% end -%>

sleep 5
echo "all done"
<% end -%>
